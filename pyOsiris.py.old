import numpy as np
import argparse
import os
from astropy.io import fits
from aspired import image_reduction
from aspired import spectral_reduction

ap = argparse.ArgumentParser()

# Get the folder containing the spectra in queue-mode form

ap.add_argument("--input_folder", type=str, required=True, help="Folder with the queue-mode format fits files.")
ap.add_argument("--custom_std_grp", type=str, required=False, help="Group name of a custom standard star observation.")



args = vars(ap.parse_args())

# Get the current work directory

cwd = os.getcwd()

# Fetch the input folder and then combine it into a full path

input_folder = args['input_folder']

input_path = os.path.join(cwd, input_folder)

# Define functions for the reduction

def do_img_red(input_path, grp_path, arc, bias, flat, stds, obj, custom_std_grp):

    # Read the HDUs of the arcs, flats, standards and objects to determine number of grating combinations.

    big_fits_list = arc + flat + stds + obj

    grisms = []

    for j in big_fits_list:

        hdul = fits.open(j)

        grisms.append(hdul[0].header['GRISM'])

    unique_grisms = np.unique(grisms)

    img_red_lists = []

    # Create the aspired image reduction list format from the input file lists for each grating.

    for j in unique_grisms:

        img_red_list = os.path.join(input_path, grp_path, 'img_red_' + j + '.list')

        img_red_lists.append(img_red_list)

        img_red_write = open(img_red_list, "w")

        if custom_std_grp is None:

            std_red_list = os.path.join(input_path, grp_path, 'img_red_' + j + '_std.list')

            img_red_lists.append(std_red_list)

            std_red_write = open(std_red_list, "w")

        for k in bias:

            img_red_write.write("bias, " + k + ", 2\n")

            if custom_std_grp is None:

                std_red_write.write("bias, " + k + ", 2\n")

        for k in flat:

            hdul = fits.open(k)

            grism = hdul[0].header['GRISM']

            if grism == j:

                img_red_write.write("flat, " + k + ", 2\n")

                if custom_std_grp is None:

                    std_red_write.write("flat, " + k + ", 2\n")

        for k in arc:

            hdul = fits.open(k)

            grism = hdul[0].header['GRISM']

            if grism == j:

                img_red_write.write("arc, " + k + ", 2\n")

                if custom_std_grp is None:

                    std_red_write.write("arc, " + k + ", 2\n")

        if custom_std_grp is None:

            for k in stds:

                hdul = fits.open(k)

                grism = hdul[0].header['GRISM']

                if grism == j:

                    std_red_write.write("light, " + k + ", 2\n")

        for k in obj:

            hdul = fits.open(k)

            grism = hdul[0].header['GRISM']

            if grism == j:

                img_red_write.write("light, " + k + ", 2\n")

    for j in img_red_lists:

        img_red_frames = image_reduction.ImageReduction(j)

        img_red_frames.reduce()

    return None

# Count the number of observation groups

input_folders = np.sort([i for i in os.listdir(input_path) if os.path.isdir(os.path.join(input_path, i))])

custom_std_grp = args['custom_std_grp']

input_grps = list(np.array(input_folders)[np.where(np.array(input_folders) != str(custom_std_grp))])

if custom_std_grp != None:
    print("Custom standard group defined: " + custom_std_grp)

    custom_std_present = os.path.isdir(os.path.join(input_path, custom_std_grp))

    if custom_std_present == False:
        raise NameError("Custom standard group not found in input folder. Exiting...")
    else:
        print("Processing standard group...")

    # Since we have a custom standard star group, we process it first.

    std_arc = []
    std_bias = []
    std_flat = []
    std_std = []
    std_obj = []

    for file in os.listdir(os.path.join(input_path, custom_std_grp, "arc")):
        if file.endswith(".fits"):
            std_arc.append(os.path.join(input_path, custom_std_grp, "arc", file))

    for file in os.listdir(os.path.join(input_path, custom_std_grp, "bias")):
        if file.endswith(".fits"):
            std_bias.append(os.path.join(input_path, custom_std_grp, "bias", file))

    for file in os.listdir(os.path.join(input_path, custom_std_grp, "flat")):
        if file.endswith(".fits"):
            std_flat.append(os.path.join(input_path, custom_std_grp, "flat", file))

    for file in os.listdir(os.path.join(input_path, custom_std_grp, "object")):
        if file.endswith(".fits"):
            std_obj.append(os.path.join(input_path, custom_std_grp, "object", file))

    # Run aspired image reduction routine

    do_img_red(input_path, custom_std_grp, std_arc, std_bias, std_flat, std_std, std_obj, custom_std_grp)







for i in input_grps:
    print("Beginning group: " + i)

    arc = []
    bias = []
    flat = []
    stds = []
    obj = []
    
    for file in os.listdir(os.path.join(input_path, i, "arc")):
        if file.endswith(".fits"):
            arc.append(os.path.join(input_path, i, "arc", file))

    for file in os.listdir(os.path.join(input_path, i, "bias")):
        if file.endswith(".fits"):
            bias.append(os.path.join(input_path, i, "bias", file))

    for file in os.listdir(os.path.join(input_path, i, "flat")):
        if file.endswith(".fits"):
            flat.append(os.path.join(input_path, i, "flat", file))

    for file in os.listdir(os.path.join(input_path, i, "stds")):
        if file.endswith(".fits"):
            stds.append(os.path.join(input_path, i, "stds", file))

    for file in os.listdir(os.path.join(input_path, i, "object")):
        if file.endswith(".fits"):
            obj.append(os.path.join(input_path, i, "object", file))

    # Run aspired image reduction routine (Placeholder)

    do_img_red(input_path, i, arc, bias, flat, stds, obj, custom_std_grp)

